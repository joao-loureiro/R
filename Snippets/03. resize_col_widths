#NIVELA O NÚMERO DE CARACTERES POR COLUNA NUMA DATA FRAME
#########################################################

#Requisitos
require(stringr)
require (dplyr)
require(readr)

#Cria directoria temporária
#if (dir.exists("Nivelador") == FALSE) {
#    dir.create("Nivelador")
#  } else {
#}

#Cria uma lista de todos os ficheiros na directoria de trabalho
list.files(getwd()) -> lista_total_ficheiros

#Cria uma lista de todos os ficheiros csv da directoria de trabalho
lista_total_ficheiros[grep(".csv", lista_total_ficheiros)] -> lista_ficheiros_csv

#Cria uma data frame a partir da lista de ficheiros csv
data.frame(lista_ficheiros_csv) -> df_lista_ficheiros_csv
names(df_lista_ficheiros_csv) <- "FICHEIROS CSV"
df_lista_ficheiros_csv

#Pergunta qual o ficheiro a ser importado
readline(paste("Seleccione o ficheiro csv a importar (1 a ", length(lista_ficheiros_csv), "): ", sep = "")) -> indice_csv

#Pergunta de que lado acontece o padding
readline(paste("O padding acontece do lado esquerdo (1) ou direito (2)? ", sep = "")) -> lado_num

if (lado_num == 2) {lado <- "right"} else {lado <- "left"}

#Pergunta qual o caracter a utilizar para o padding
readline(paste("Qual o caracter a utilizar para o padding ('Enter' para espaço em branco)? ", sep = "")) -> car_num

if (car_num == "") {caract <- "\x20"}

#Importa o ficheiro escolhido
read.csv(lista_ficheiros_csv[as.numeric(indice_csv)], stringsAsFactors = FALSE) -> dados_brutos

##########################################
#Limpa a data_frame contendo os resultados

#Substitui texto livre por "B*" ("B*" -> resultados_df[i,j]), ou retira a coluna (resultados_df[-j] -> resultados_df)?
#Constroi um vector de integers chamado texto_livre
vector('integer') -> texto_livre

#Adiciona a esse vector o número das colunas em que há texto livre
#for (i in 1:ncol(dados_brutos)-1) {
#  if ((class(dados_brutos[,i]) != "integer") && (class(dados_brutos[,i]) != "numeric")) {
#    c(texto_livre, i) -> texto_livre
#  }
#}

#Armazena o nome das perguntas de texto livre
#names(dados_brutos[texto_livre]) -> perguntas_texto_livre

#Retira as colunas com texto livre se houver texto livre
#if (length(texto_livre)>0) {
#  dados_brutos[-texto_livre] -> dados_brutos
#} else {
#}

#Substitui todas as sequências "-66", "-77" e "-99" por "A*"
#data.frame(lapply(dados_brutos, gsub, pattern = "-66", replacement = "A*", fixed = TRUE), stringsAsFactors = FALSE) -> dados_brutos
#data.frame(lapply(dados_brutos, gsub, pattern = "-77", replacement = "A*", fixed = TRUE), stringsAsFactors = FALSE) -> dados_brutos
#data.frame(lapply(dados_brutos, gsub, pattern = "-99", replacement = "A*", fixed = TRUE), stringsAsFactors = FALSE) -> dados_brutos
############################################

#Guarda a informação original do número de variáveis e do respectivo nome
names(dados_brutos) -> backup_nomes
ncol(dados_brutos) -> numero_variaveis
sapply(dados_brutos, function(x) {max(nchar(as.character(x)), na.rm = TRUE)}) -> tamanhos

#Percorre as colunas, fixa um tamanho a partir de tamanhos, e nivela a coluna
for (tamanho in 1:length(tamanhos)) {1
  str_pad(dados_brutos[,tamanho], width = tamanhos[[tamanho]], side = lado, pad = caract) -> coluna_temporaria
  cbind(dados_brutos, coluna_temporaria)  -> dados_brutos
}

#Corta dados_brutos ao meio e atribui-lhe os mesmos nomes
dados_brutos[,(ncol(dados_brutos)/2+1):ncol(dados_brutos)] -> dados_refinados
names(dados_refinados) <- backup_nomes

#Guarda o ficheiro nivelados
str_replace(lista_ficheiros_csv[as.numeric(indice_csv)], ".csv", "_NEW.csv") -> novo_ficheiro
write.csv(dados_refinados, file = novo_ficheiro, quote = FALSE, row.names = FALSE)

#Apaga directoria temporária
#if (dir.exists("Nivelador") == TRUE) {
#    unlink("Nivelador", recursive = TRUE)
#  } else {
#}
